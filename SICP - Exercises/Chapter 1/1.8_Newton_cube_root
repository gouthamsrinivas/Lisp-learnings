
(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
	(else else-clause)))

(define (average x y)
  (/ (+ x y) 2))

(define (square x)
  (* x x))


(define (abs x)
 (if (> x 0) x (- x))) 


(define (improve guess x)
 (/ (+ (/ x (square guess)) (* 2 guess)) 3))

(define (isGoodEnough guess prev-guess)
  (< (* ( / (abs (- guess prev-guess)) prev-guess) 100) 0.5)) ; if the change is guess is less than 0.5, then we assume we are good to go

(define (cube-iter guess x prev-guess)
  (cond ((isGoodEnough guess prev-guess) guess ) ; Using cond
        (else (cube-iter (improve guess x) x guess))))

(define (cuberoot x)
  (cube-iter 1.0 x 0.5))


(display (cuberoot 0.027 )) 
(display "\n")
 


